// +build generate

package main

import (
	"fmt"
	"math/big"
	"text/template"
	//"fmt"
	"crypto/dsa"
	"os"

	"golang.org/x/crypto/openpgp"

	"github.com/dolmen-go/codegen"
)

func readKeyRing(path string) (openpgp.EntityList, error) {
	in, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer in.Close()

	return openpgp.ReadArmoredKeyRing(in)
}

const tmpl = `// Code generated by go run -tags generate pause_pubkey_gen.go # DO NOT EDIT.

package CPAN

import (
	"crypto/dsa"
	"math/big"
	"time"

	"golang.org/x/crypto/openpgp/packet"
)

// PAUSEPublicKey is the embeded public key of the central PAUSE indexer
var PAUSEPublicKey *packet.PublicKey

func init() {
	var dsaPubKey dsa.PublicKey
	dsaPubKey.P, _ = new(big.Int).SetString("{{Text .DSA.P 36}}", 36)
	dsaPubKey.Q, _ = new(big.Int).SetString("{{Text .DSA.Q 36}}", 36)
	dsaPubKey.G, _ = new(big.Int).SetString("{{Text .DSA.G 36}}", 36)
	dsaPubKey.Y, _ = new(big.Int).SetString("{{Text .DSA.Y 36}}", 36)

	PAUSEPublicKey = packet.NewDSAPublicKey(time.Unix({{.CreationTime.sec}}, {{.CreationTime.nsec}}), &dsaPubKey)
}
`

func main() {
	keyring, err := readKeyRing("testdata/pause.pubkey")
	if err != nil && keyring == nil {
		fmt.Fprint(os.Stderr, err)
		os.Exit(1)
	}
	fmt.Printf("%d keys", len(keyring))
	pubkey := keyring[0].PrimaryKey
	if dsaPubKey, ok := pubkey.PublicKey.(*dsa.PublicKey); ok {
		//f := (*big.Int).Text
		//fmt.Println(f(dsaPubKey.P, 36))
		t := &codegen.CodeTemplate{
			Template: template.Must(template.New("").Funcs(template.FuncMap{
				"Text": (*big.Int).Text,
			}).Parse(tmpl)),
		}
		err = t.CreateFile("pause_pubkey.go", map[string]interface{}{
			"CreationTime": map[string]int64{
				"sec":  pubkey.CreationTime.Unix(),
				"nsec": pubkey.CreationTime.UnixNano() % 1000000000,
			},
			"DSA": dsaPubKey,
		})
		if err != nil {
			fmt.Fprint(os.Stderr, err)
			os.Exit(1)
		}
	} else {
		fmt.Fprint(os.Stderr, "Not a DSA public key")
		os.Exit(1)
	}
}
